datos3 <- read.csv('~/Downloads/denue/denue_00_46321-46531_csv/conjunto_de_datos/denue_inegi_46321-46531_.csv')
datos4 <- read.csv('~/Downloads/denue/denue_00_46591-46911_csv/conjunto_de_datos/denue_inegi_46591-46911_.csv')
head(datos1)
colnames(datos1)
colnames(datos1) == colnames(datos2)
colnames(datos1) == colnames(datos3)
colnames(datos1) == colnames(datos4)
filenames <- list.files(path='~/Downloads/denue/',pattern='denue_inegi_*.csv')
print(filenames)
filenames <- list.files(path='~/Downloads/denue/',pattern='denue_inegi_*.csv')
filenames
dir('~/Downloads/denue/')
?list.files
list.files(path='~/Downloads/denue/')
list.files(path='~/Downloads/denue/',pattern='*.csv')
list.files(path='~/Downloads/denue/',pattern='denue_*.csv')
list.files(path='~/Downloads/denue/',pattern='denue_inegi.csv')
list.files(path='~/Downloads/denue/',pattern='denue_inegi*')
filenames <- list.files(path='~/Downloads/denue/',pattern='denue_inegi*')
filenames
fullpath = file.path('~/Downloads/denue/',filenames)
fullpath
fullpath = file.path('~/Downloads/denue',filenames)
fullpath
dataset <- do.call('rbind',lapply(filenames,FUN=function(files){read.csv(files)}))
dataset <- do.call('rbind',lapply(fullpath,FUN=function(files){read.csv(files)}))
head(dataset)
colnames(dataset)
dim(dataset)
colnames(dataset)
dataset$codigo_act == 462112
bool1 <- dataset$codigo_act == 462112
head(dataset[bool1,])
bool2 <- dataset$raz_social == 'CADENA COMERCIAL OXXO SA DE CV'
head(dataset[bool2,])
oxxo_base <- dataset[bool2,]
dim(oxxo_base)
head(oxxo_base[,c(40,41)])
head(oxxo_base[,c(36,40,41)])
head(oxxo_base[,c(31,40,41)])
head(oxxo_base[,c(30,31,40,41)])
head(oxxo_base[,c(29,31,40,41)])
head(oxxo_base[,c(28:31,40,41)])
unique
unique(oxxo_base$entidad)
head(oxxo_base[with(oxxo_base, order(entidad,municipio))])
head(oxxo_base[with(oxxo_base, order(entidad,municipio)),])
colnames(oxxo_base)
head(oxxo_base[,c(28:33,40,41)])
?write.csv
head(oxxo_base[with(oxxo_base, order(entidad,municipio)),])
head(oxxo_base[with(oxxo_base, order(entidad,municipio)),c(28:33,40,41)])
oxxo <- oxxo_base[with(oxxo_base, order(entidad,municipio)),c(28:33,40,41)]
head(oxxo)
rownames(oxxo) <- NULL
head(oxxo)
tail(oxxo)
write.csv(oxxo,'/Volumes/ADATA HD/2024-30daymapchallenge/03-polygons/csv/oxxos.csv')
install.packages('vegan')
library(vegan)#
#
pca1 <- rda(iris[,-5])  # pca of iris data#
pca2 <- rda(iris[,-5],scale=TRUE)#
#
punt1 <- scores(pca1)#
punt2 <- scores(pca2)
?biplot(())
?biplot
pca1
summary(pca1)
str(pca1)
?rda
pca1$Ybar
pca1
summary(pca1)
str(pca1)
pca1$u
pca1$CA
pca1$CA$u
ggplot(pca1$CA$u[,1:2],aes(x=PC1,y=PC2)) +#
	geompoint(color='red')
library(vegan)#
library(ggplot2)
pca1 <- rda(iris[,-5])  # pca of iris data#
pca2 <- rda(iris[,-5],scale=TRUE)#
#
punt1 <- scores(pca1)#
punt2 <- scores(pca2)#
#
ggplot(pca1$CA$u[,1:2],aes(x=PC1,y=PC2)) +#
	geompoint(color='red')
ggplot(pca1$CA$u[,1:2],aes(x=PC1,y=PC2)) +#
	geom_point(color='red')
str(pca1)
pca1$CA$v
punt1
pca1$CA$v
str(pca1)
?rda
?score
?scores
plot(pca1)
pca1$colsum
pca1$Ybar
plot(pca1)
str(pca1)
pca1$CA
?biplot
pca1$CA$v
plot(pca1)
biplot(pca1)
thing <- biplot(pca1)
str(thing)
pca1$Ybar
?rda
scores(rda)
scores(pca1)
pca1$CA$u[1:10,]
biplot.rda
biplot
scores
punt1
punt1[1:10,]
punt1$sites[1:10,]
plot(punt1$sites)
points(pca1$CA$u[,1:2])
plot(punt1$sites)
points(scale(pca1$CA$u[,1:2]))
biplot(pca1)
points(scale(pca1$CA$u[,1:2]))
biplot(pca1)
thing
thing <- biplot(pca1)
str(thing)
scores(pca1)
str(scores(pca1))
?biplot
ggplot(punt1$sites,aes(x=PC1,y=PC2)) +#
	geom_point(color='red')
biplot(pca1)
ggplot(punt1$sites,aes(x=PC1,y=PC2)) +#
	geom_point(color='red')
?geom_segment
ggplot(punt1$sites,aes(x=PC1,y=PC2)) +#
	geom_point(color='red') + #
	geom_segment(data=punt1$species,arrow=arrow())
?geom_segment
punt1$species
ggplot(punt1$sites,aes(x=PC1,y=PC2)) +#
	geom_point(color='red') + #
	geom_segment(data=punt1$species,#
				 aes(x=0,y=0,xend=PC1,yend=PC2),#
				 arrow=arrow())
ggplot(sites1,aes(x=PC1,y=PC2)) +#
	geom_point(color='red') + #
	geom_segment(data=species1,#
				 aes(x=0,y=0,xend=PC1,yend=PC2),#
				 arrow=arrow()) +#
	annotate('text',x=species1[,1],y=species1[,2],label=rownames(species1))
pca1     <- rda(iris[,-5])  # pca of iris data#
pca2     <- rda(iris[,-5],scale=TRUE)#
#
punt1    <- scores(pca1)#
punt2    <- scores(pca2)#
#
sites1   <- punt1$sites#
sites2   <- punt2$sites#
#
species1 <- punt1$species#
species2 <- punt2$species
ggplot(sites1,aes(x=PC1,y=PC2)) +#
	geom_point(color='red') + #
	geom_segment(data=species1,#
				 aes(x=0,y=0,xend=PC1,yend=PC2),#
				 arrow=arrow()) +#
	annotate('text',x=species1[,1],y=species1[,2],label=rownames(species1))
ggplot(sites1,aes(x=PC1,y=PC2)) +#
	geom_point(color='red') + #
	geom_segment(data=species1,#
				 aes(x=0,y=0,xend=PC1,yend=PC2),#
				 arrow=arrow(),#
				 color='blue') +#
	annotate('text',#
			 x=species1[,1],#
			 y=species1[,2],#
			 label=rownames(species1))
plot1 <- ggplot(sites1,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species1,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species1[,1],#
			 		  y=species1[,2],#
			 		  label=rownames(species1))
plot1
plot1 <- ggplot(sites1,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species1,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species1[,1],#
			 		  y=species1[,2],#
			 		  label=rownames(species1)) +#
			 labs(title='Principal Component Analysis')#
plot1
?ggarrange()
?ggarrange
??ggarrange
library(vegan)#
library(ggplot2)#
library(ggpubr)
??ggarrange
install.packages(ggpubr)
install.packages('ggpubr')
library(vegan)#
library(ggplot2)#
library(ggpubr)
?rda()
plot1 <- ggplot(sites1,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species1,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species1[,1],#
			 		  y=species1[,2],#
			 		  label=rownames(species1)) +#
			 labs(title='PCA, raw data')#
plot2 <- ggplot(sites2,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species2,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species2[,1],#
			 		  y=species2[,2],#
			 		  label=rownames(species2)) +#
			 labs(title='PCA, scaled data to variance=1')#
figure <- ggarrange(plot1,plot2,labels=c('a)','b)'),ncol=2,nrow=1)#
figure
plot1 <- ggplot(sites1,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species1,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species1[,1],#
			 		  y=species1[,2],#
			 		  label=rownames(species1)) +#
			 labs(title='PCA, raw data')#
plot2 <- ggplot(sites2,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species2,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species2[,1],#
			 		  y=species2[,2],#
			 		  label=rownames(species2)) +#
			 labs(title='PCA, scaled data to variance=1')#
figure <- ggarrange(plot1,plot2,ncol=2,nrow=1)#
figure
plot1 <- ggplot(sites1,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species1,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species1[,1],#
			 		  y=species1[,2],#
			 		  label=rownames(species1)) +#
			 labs(title='PCA, raw data')#
plot2 <- ggplot(sites2,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species2,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species2[,1],#
			 		  y=species2[,2],#
			 		  label=rownames(species2)) +#
			 labs(title='PCA, scaled data to unit variance')#
figure <- ggarrange(plot1,plot2,ncol=2,nrow=1)#
figure
plotpca <- function(sites,species) {#
	plotf <- ggplot(sites1,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species1,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species1[,1],#
			 		  y=species1[,2],#
			 		  label=rownames(species1)) +#
			 labs(title='Principal Component Analysis')#
	return (plotf)#
}
plot1 <- plotpca(sites1,species1)#
plot1
plot1 <- plotpca(sites1,species1)#
plot2 <- plotpca(sites2,species2)#
figure <- ggarrange(plot1,plot2,ncol=2,nrow=1)#
figure
plotpca <- function(sites,species) {#
	plotf <- ggplot(sites,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species[,1],#
			 		  y=species[,2],#
			 		  label=rownames(species)) +#
			 labs(title='Principal Component Analysis')#
	return (plotf)#
}
plot1 <- plotpca(sites1,species1)#
plot1
plot1 <- plotpca(sites1,species1)#
plot2 <- plotpca(sites2,species2)#
figure <- ggarrange(plot1,plot2,ncol=2,nrow=1)#
figure
plotpca <- function(sites,species) {#
	plotf <- ggplot(sites,aes(x=PC1,y=PC2)) + #
			 geom_point(color='red') + #
			 geom_segment(data=species,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='blue') + #
			 annotate('text',#
			 		  x=species[,1],#
			 		  y=species[,2],#
			 		  label=rownames(species))#
	return (plotf)#
}
plot1 <- plotpca(sites1,species1) + labs(title='Principal Component Analysis')#
plot1
plot1 <- plotpca(sites1,species1) + labs(title='PCA, original data')#
plot2 <- plotpca(sites2,species2) + labs(title='PCA, data scaled to unit variance')#
figure <- ggarrange(plot1,plot2,ncol=2,nrow=1)#
figure
super <- read.delim('./stats-data/superficiales')
super <- read.delim('./stats-data/superficiales.csv')
super <- read.delim('~/stats-data/superficiales.csv')
super <- read.delim('~/Documents/barroso-stats/stats-data/superficiales.csv')
head(super)
super <- read.csv('~/Documents/barroso-stats/stats-data/superficiales.csv')
head(super)
unique(super$sector)
dim(super)
super
super <- read.csv('~/Documents/barroso-stats/stats-data/superficiales.csv')#
#
pca3     <- rda(super[,3:13])#
punt3    <- scores(pca3)#
sites3   <- punt3$sites#
species3 <- punt3$species#
#
plotpca(sites3,species3)
pca3     <- rda(super[,4:13])#
punt3    <- scores(pca3)#
sites3   <- punt3$sites#
species3 <- punt3$species#
#
plotpca(sites3,species3)
pca3     <- rda(super[,5:13])#
punt3    <- scores(pca3)#
sites3   <- punt3$sites#
species3 <- punt3$species#
#
plotpca(sites3,species3)
pca3     <- rda(super[,5:13],scale=T)#
punt3    <- scores(pca3)#
sites3   <- punt3$sites#
species3 <- punt3$species#
#
plotpca(sites3,species3)
pca3     <- rda(super[,3:13],scale=T)#
punt3    <- scores(pca3)#
sites3   <- punt3$sites#
species3 <- punt3$species#
#
plotpca(sites3,species3)
plotpca <- function(sites,species) {#
	plotf <- ggplot(sites,aes(x=PC1,y=PC2)) + #
			 geom_point(color='black') + #
			 geom_segment(data=species,#
			 			  aes(x=0,y=0,xend=PC1,yend=PC2),#
			 			  arrow=arrow(),#
			 			  color='red') + #
			 annotate('text',#
			 		  x=species[,1],#
			 		  y=species[,2],#
			 		  label=rownames(species),color='blue')#
	return (plotf)#
}
plot1 <- plotpca(sites1,species1) + labs(title='Principal Component Analysis')#
plot1
plot1 <- plotpca(sites1,species1) + labs(title='PCA, original data')#
plot2 <- plotpca(sites2,species2) + labs(title='PCA, data scaled to unit variance')#
figure <- ggarrange(plot1,plot2,ncol=2,nrow=1)#
figure
super <- read.csv('~/Documents/barroso-stats/stats-data/superficiales.csv')#
#
pca3     <- rda(super[,3:13],scale=T)#
punt3    <- scores(pca3)#
sites3   <- punt3$sites#
species3 <- punt3$species#
#
plotpca(sites3,species3)
plot1 <- plotpca(sites1,species1) + labs(title='PCA, original data')#
plot2 <- plotpca(sites2,species2) + labs(title='PCA, data scaled to unit variance')#
figure <- ggarrange(plot1,plot2,ncol=2,nrow=1)#
figure
library(jsonlite)
library(nparcomp)
hvsrtodo <- read_json('/Users/roberto/Documents/barroso-stats/hvsr_colima_24h.json')
dias <- hvsrtodo$day[1:352]
frecs <- hvsrtodo$day[1:352]
dias[182]
dias[183]
dias_pre[183]
dias_pre <- dias[183:]
dias_pre <- dias[1:182]
dias_post <- dias[183:352]
frecs_pre <- frecs[1:182]
frecs_post <- frecs[183:352]
dias
dias <- as.numeric(hvsrtodo$day[1:352])
frecs <- as.numeric(hvsrtodo$day[1:352])
dias_pre <- dias[1:182]
dias_post <- dias[183:352]
frecs_pre <- frecs[1:182]
frecs_post <- frecs[183:352]
dias_pre
dias_post
dias_pre <- dias[1:181]
dias_post <- dias[182:352]
frecs_pre <- frecs[1:181]
frecs_post <- frecs[182:352]
dens_pre <- density(frecs_pre)
dens_post <- density(frecs_pre)
dens_post <- density(frecs_post)
plot(d,lwd=2)
plot(dens_pre,lwd=2)
line(dens_post)
lines(dens_post)
frecs_pre
frecs <- as.numeric(hvsrtodo$f0_freq_bis[1:352])
frecs_pre <- frecs[1:181]
frecs_post <- frecs[182:352]
dens_pre <- density(frecs_pre)
dens_post <- density(frecs_post)
plot(dens_pre,lwd=2)
lines(dens_post)
dens_pre
str(dens_pre)
df <- (dens_pre$x,dens_pre$y,dens_post$x,dens_post$y)
df <- data.frame(dens_pre$x,dens_pre$y,dens_post$x,dens_post$y)
df
head(df)
df <- data.frame(fpre=dens_pre$x,dpre=dens_pre$y,fpost=dens_post$x,dpost=dens_post$y)
head(df)
write_csv(df,'/Users/roberto/Documents/barroso-stats/hvsrdensitykernels.csv')
write.csv(df,'/Users/roberto/Documents/barroso-stats/hvsrdensitykernels.csv')
plot(dens_pre,lwd=2)
lines(dens_post)
wilcox.test(frecs_pre,frecs_post)
w <- wilcox.test(frecs_pre,frecs_post)
str(w)
w$p.value
library(cluster)
x <- 1:30000
y <- 1:30000
z <- 1:30000
df <- data.frame(x=x, y=y, z=z)
dists <- dist(df)
clust <- kmeans(df,5)
str(clust)
plot(clust$centers)
ss <- silhouette(clust$cluster,dists)
# ######################################### ##
# k-means clustering of Mexican earthquakes ##
# ######################################### ##
#
# Made by: Roberto Barroso Fernández#
# Instituto de Geociencias UNAM#
##
# Proyecto final: Herramientas Estadísticas de las Geociencias#
#
# ######################################### ##
#            Setting up the code            ##
# ######################################### ##
#
# Reemplazar path por el preferido#
setwd("/Users/roberto/Documents/stats-final-project")#
# setwd("/Users/robby/Documents/stats-final-project")#
#
library(geodata)#
library(ggplot2)#
library(sf)#
library(dplyr)#
library(scales)#
library(cluster)  # silhouette#
#
######### ######### ######### ######### ######### ######### ######### ##########
#
# ######################################### ##
#            Defining functions             ##
# ######################################### ##
#
plims <- function(x, p = 0.1) {#
    # limits of plot axis#
    # x - numeric#
    # p - percentage (from 0 to 1) of padding#
    maxval <- max(x)#
    minval <- min(x)#
    span   <- maxval - minval#
    lim_hi <- maxval + 0.5 * p * span#
    lim_lo <- minval - 0.5 * p * span#
    return(c(lim_lo, lim_hi))#
}#
#
magfreqs <- function(m, mbin = 0.1) {#
	# Generates data.frame of number of events against magnitude#
	# Input:#
	# m - list of magnitudes#
	# mbin - binning width (difference)#
	# Output:#
	# df$magnitude -#
	# df$amount -#
	mags = seq(round(min(m), digits = 1), round(max(m), digits = 1), mbin)#
	amt = 1:length(mags)#
	for (i in 1:length(mags)){#
		cutmag = mags[i]#
		amt[i] = length(m[m>cutmag])#
	}#
	df <- data.frame(magnitude = mags, amount = amt)#
	return(df)#
}#
#
kagan <- function(x) {#
	# Kagan relation for maximum aftershock affectation area#
	# x - array (can be single-element)#
	# returns influence radius in kilometers#
	kgn <- 20 * 10 ^ ((x - 6)/2)#
	return (kgn)#
}#
#
sph_to_rct <- function(lat,lon,depth,r=6371) {#
	# function to extract Cartesian coordinates from earthquake#
	# epicenter and depth#
	# Input (all arrays)#
	# lat - latitude, in degrees#
	# lon - longitude, in degrees#
	# depth - in kilometers#
	# r - Earth's mean radius, in kilometers#
	# returns data.frame with x, y, z coordinates in kilometers#
	rho   = r - depth#
	theta = lon * pi / 180  # longitude in radians#
	phi   = (90-lat) * pi / 180  # 90º-latitude in radians#
	x <- rho * sin(phi) * cos(theta)#
	y <- rho * sin(phi) * sin(theta)#
	z <- rho * cos(phi)#
	df <- data.frame(X=x,Y=y,Z=z)#
	return (df)#
}#
#
timediff <- function(date1,date2) {#
	# converts time difference to days#
	# 1 day = 24 hrs = 1440 mins = 86400 secs#
	delta <- date2 - date1#
	delta_val <- as.numeric(delta) #
	delta_unit <- attr(delta,'unit') #
	if (delta_unit == 'secs') {#
		delta_val <- delta_val / 86400#
	} else if (delta_unit == 'mins') {#
		delta_val <- delta_val / 1440 #
	} else if (delta_unit == 'hours') {#
		delta_val <- delta_val / 24#
	} #
	return(delta_val)#
}#
######### ######### ######### ######### ######### ######### ######### ##########
#
# Definin Gardner-Knopoff (1974) windows#
#
# If declustering this way, it is assumed that events that aren't#
# clustered are completely independent, which is probably not the case#
# for Mexico (or at least, the Mexican Subduction Zone, MSZ).#
# Declustering based on Kagan radii (Avila-Barrientos et al., 2015),#
# then some other models, would be better, but due to time constraints,#
# I am using Gardner-Knopoff. Hope this helps :)#
#
# magnitudes#
gk_m <- c(2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0)#
# radii in kilometers#
gk_l <- c(19.5, 22.5, 26, 30, 35, 40, 47, 54, 61, 70, 81, 94)#
# time intervals in days#
gk_t <- c(6, 11.5, 22, 42, 83, 155, 290, 510, 790, 915, 960, 985)#
#
gk <- data.frame(m = gk_m, l = gk_l, t = gk_t)#
#
######### ######### ######### ######### ######### ######### ######### ##########
#
# ######################################### ##
#           Processing the catalog          ##
# ######################################### ##
#
# Loading the catalog#
sismos <- read.csv("catalogo_sismos.csv", skip = 4)[-(304906:304912), ] %>%#
    filter(Magnitud != "no calculable")#
sismos$utc <- paste(sismos$Fecha.UTC,sismos$Hora.UTC) %>%#
    strptime("%Y-%m-%d %H:%M:%S") %>%#
    as.POSIXct(tz = "UTC")#
sismos$Magnitud <- as.numeric(sismos$Magnitud)#
sismo_coords <- sph_to_rct(#
    sismos$Latitud, sismos$Longitud, sismos$Profundidad#
)#
sismos$X <- sismo_coords$X#
sismos$Y <- sismo_coords$Y#
sismos$Z <- sismo_coords$Z#
#
# relative time to first event in catalog, in days#
time <- 1:length(sismos$X)#
for (i in 1:length(sismos$X)) {#
    date1 = sismos$utc[1]#
    date2 = sismos$utc[i]#
    time[i] <- timediff(date1, date2)#
}#
sismos$time <- time#
#
# First step: taking into account completeness of catalog#
mc <- 3.1#
mc_bool <- sismos$Magnitud >= mc#
sismos_mc <- sismos[mc_bool,]   # complete for older data#
sismos_mc_len <- length(sismos_mc[, 1])#
sismos_mc$idx <- 1:sismos_mc_len#
#
# Second step: removing aftershocks#
# sismos_mc_hi$kagan <- kagan(sismos_mc_hi$Magnitud)#
#
# ######################################### ##
#                Declustering               ##
# ######################################### ##
#
# Using the Gardner-Knopoff algorithm#
#
gk_rad <- spline(x = gk$m, y = gk$l, method = "natural",#
                 xout = sismos_mc$Magnitud)$y#
gk_tdy <- spline(x = gk$m, y = gk$t, method = "natural",#
                 xout = sismos_mc$Magnitud)$y#
#
# 0 if not an aftershock, 1 if yes#
aftershocks <- rep(0,sismos_mc_len)#
for (ii in 1:sismos_mc_len) {#
    if (ii %% 5000 == 0){#
        print(ii)#
    }#
    if (ii == sismos_mc_len){#
        break#
    }#
    mag <- sismos_mc$Magnitud[ii]#
    rad <- gk_rad[ii]  # radius#
    tdy <- gk_tdy[ii]  # time#
    # if the event isn't already marked as an aftershock#
    if (aftershocks[ii] == 0) {#
        jj <- ii + 1#
        # it has to fall within the acceptable time window for#
        # declustering#
        while ((sismos_mc$time[jj] - sismos_mc$time[ii]) < tdy) {#
            # could be more elegant#
            x1 <- sismos_mc$X[ii]#
            y1 <- sismos_mc$Y[ii]#
            z1 <- sismos_mc$Z[ii]#
            x2 <- sismos_mc$X[jj]#
            y2 <- sismos_mc$Y[jj]#
            z2 <- sismos_mc$Z[jj]#
            # distance between events#
            rad_diff <- sqrt((x2-x1)^2 + (y2-y1)^2 + (z2-z1)^2)#
            # it has to fall withing the acceptable radius for#
            # it to be marked as an aftershock#
            if (rad_diff < rad) {#
                aftershocks[jj] = 1#
            }#
            if (jj == sismos_mc_len){#
                break#
            }#
            jj <- jj + 1#
        }#
    }#
}#
#
sismos_mc$aftershocks <- aftershocks#
#
sismos_clust <- sismos_mc[sismos_mc$aftershocks == 1, ]#
sismos_bckgd <- sismos_mc[sismos_mc$aftershocks == 0, ]#
#
######### ######### ######### ######### ######### ######### ######### ##########
#
# Now, the statistical analysis part#
#
# ######################################### ##
#             k-means clustering            ##
# ######################################### ##
#
# Splitting catalog into two parts, one for more superficial events,#
# the other for deeper events#
# threshold set at 40 km, after Zuñiga et al. (2017)#
#
# To perform:#
# Elbow test (author, year)#
# Gap test (Tibshirani et al. 2001, estiamting the number of clusters...)#
# Silhouette test (Rousseeuw, 1987)#
# Choosing X, Y, Z#
#
# Magnitude is a function of fault size anyway...#
#
cutoff_depth <- 40#
#
bool_depth <- sismos_bckgd$Profundidad <= cutoff_depth#
#
shallow <- sismos_bckgd[bool_depth, c("Longitud", "Latitud", "Magnitud",#
                                      "X", "Y", "Z")]#
deep <- sismos_bckgd[!bool_depth, c("Longitud", "Latitud", "Magnitud",#
                                    "X", "Y", "Z")]#
#
# For tests#
n_clust <- 2:20#
dists_shallow <- dist(shallow[, c("X", "Y", "Z")])#
#
# For elbow test#
elbow_test <- seq(1, length(n_clust), 1)#
#
# For gap test#
gap_test <- seq(1, length(n_clust), 1)#
#
# For silhouette test#
silhouette_test <- seq(1, length(n_clust), 1)#
W_k_clust <- seq(1, length(n_clust), 1)#
W_k_random <- seq(1, length(n_clust), 1)#
B <- 10#
#
for (ii in seq.int(1, length(n_clust), 1)) {#
	k <- n_clust[ii]#
	print(k)#
	clust <- kmeans(shallow[, c("X", "Y", "Z")], k, nstart = 25)#
    # Elbow test#
	elbow_test[ii] <- clust$tot.withinss#
    # Gap test#
    # Gap test: for our data cluster#
    clust_dist_sum <- seq(1, k, 1)#
    pooled <- seq(1, k, 1)#
    for (jj in seq(1, k, 1)) {#
        C_jj <- shallow[clust$cluster == jj, c("X", "Y", "Z")]#
        clust_dist <- dist(C_jj)#
        clust_dist_sum[jj] <- sum(clust_dist)#
        # Element for pooled within-cluster SS around cluster mean#
        pooled[jj] <- clust_dist_sum[jj] / (2 * clust$size[jj])#
    }#
    pooled_sum <- sum(pooled)  # W_k of our data cluster#
    # Gap test: for the random cluster#
    # Has to be repeated B times#
    # Could've used clusGap from 'cluster', but this is funnier#
    pooled_random <- seq(1, B, 1)#
    for (kk in seq(1, B, 1)) {#
        x_random <- runif(n = length(shallow$X),#
                          min = min(shallow$X),#
                          max = max(shallow$X))#
        y_random <- runif(n = length(shallow$Y),#
                          min = min(shallow$Y),#
                          max = max(shallow$Y))#
        z_random <- runif(n = length(shallow$Z),#
                          min = min(shallow$Z),#
                          max = max(shallow$Z))#
        random <- data.frame(X = x_random, Y = y_random, Z = z_random)#
        clust_random <- kmeans(random, clust$centers)#
        clust_random_dist_sum <- seq(1, k, 1)#
        pooled_random_bit <- seq(1, k, 1)#
        for (ll in seq(1, k, 1)) {#
            C_ll <- random[clust_random$cluster == ll, ]#
            clust_random_dist <- dist(C_ll)#
            clust_random_dist_sum[ll] <- sum(clust_random_dist)#
            # Element for pooled within-cluster SS around cluster mean#
            pooled_random_bit[ll] <- clust_random_dist_sum[ll] /#
                                     (2 * clust_random$size[ll])#
        pooled_random_bit_sum <- sum(pooled_random_bit)  # W_kb of random clus#
        pooled_random[kk] <- pooled_random_bit_sum#
        }#
    }#
    gap_k <- (1 / B) * sum(log10(pooled_random)) - log10(pooled_sum)#
    gap_test[ii] <- gap_k#
    # Silhouette test: from the 'cluster' library#
    sil <- silhouette(clust$cluster, dists_shallow)#
    silhouette_test[ii] <- mean(sil[, 3])  # mean silhouette width#
    rm(sil)#
}
mem.maxVSize()
mem.maxVSize(vsize = 32768)
B
cutoff_depth <- 40#
#
bool_depth <- sismos_bckgd$Profundidad <= cutoff_depth#
#
shallow <- sismos_bckgd[bool_depth, c("Longitud", "Latitud", "Magnitud",#
                                      "X", "Y", "Z")]#
deep <- sismos_bckgd[!bool_depth, c("Longitud", "Latitud", "Magnitud",#
                                    "X", "Y", "Z")]#
#
# For tests#
n_clust <- 2:20#
dists_shallow <- dist(shallow[, c("X", "Y", "Z")])#
#
# For elbow test#
elbow_test <- seq(1, length(n_clust), 1)#
#
# For gap test#
gap_test <- seq(1, length(n_clust), 1)#
#
# For silhouette test#
silhouette_test <- seq(1, length(n_clust), 1)#
W_k_clust <- seq(1, length(n_clust), 1)#
W_k_random <- seq(1, length(n_clust), 1)#
B <- 10#
#
for (ii in seq.int(1, length(n_clust), 1)) {#
	k <- n_clust[ii]#
	print(k)#
	clust <- kmeans(shallow[, c("X", "Y", "Z")], k, nstart = 25)#
    # Elbow test#
	elbow_test[ii] <- clust$tot.withinss#
    # Gap test#
    # Gap test: for our data cluster#
    clust_dist_sum <- seq(1, k, 1)#
    pooled <- seq(1, k, 1)#
    for (jj in seq(1, k, 1)) {#
        C_jj <- shallow[clust$cluster == jj, c("X", "Y", "Z")]#
        clust_dist <- dist(C_jj)#
        clust_dist_sum[jj] <- sum(clust_dist)#
        # Element for pooled within-cluster SS around cluster mean#
        pooled[jj] <- clust_dist_sum[jj] / (2 * clust$size[jj])#
    }#
    pooled_sum <- sum(pooled)  # W_k of our data cluster#
    # Gap test: for the random cluster#
    # Has to be repeated B times#
    # Could've used clusGap from 'cluster', but this is funnier#
    pooled_random <- seq(1, B, 1)#
    for (kk in seq(1, B, 1)) {#
        x_random <- runif(n = length(shallow$X),#
                          min = min(shallow$X),#
                          max = max(shallow$X))#
        y_random <- runif(n = length(shallow$Y),#
                          min = min(shallow$Y),#
                          max = max(shallow$Y))#
        z_random <- runif(n = length(shallow$Z),#
                          min = min(shallow$Z),#
                          max = max(shallow$Z))#
        random <- data.frame(X = x_random, Y = y_random, Z = z_random)#
        clust_random <- kmeans(random, clust$centers)#
        clust_random_dist_sum <- seq(1, k, 1)#
        pooled_random_bit <- seq(1, k, 1)#
        for (ll in seq(1, k, 1)) {#
            C_ll <- random[clust_random$cluster == ll, ]#
            clust_random_dist <- dist(C_ll)#
            clust_random_dist_sum[ll] <- sum(clust_random_dist)#
            # Element for pooled within-cluster SS around cluster mean#
            pooled_random_bit[ll] <- clust_random_dist_sum[ll] /#
                                     (2 * clust_random$size[ll])#
        pooled_random_bit_sum <- sum(pooled_random_bit)  # W_kb of random clus#
        pooled_random[kk] <- pooled_random_bit_sum#
        }#
    }#
    gap_k <- (1 / B) * sum(log10(pooled_random)) - log10(pooled_sum)#
    gap_test[ii] <- gap_k#
    # Silhouette test: from the 'cluster' library#
    sil <- silhouette(clust$cluster, dists_shallow)#
    silhouette_test[ii] <- mean(sil[, 3])  # mean silhouette width#
    rm(sil)#
}
silhouette_test
